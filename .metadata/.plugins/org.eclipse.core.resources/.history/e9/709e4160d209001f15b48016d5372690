package net.javaguides.springboot.mapper;

import net.javaguides.springboot.dto.OrderDto;
import net.javaguides.springboot.model.CartItem;
import net.javaguides.springboot.model.Order;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class OrderMapper {

	public static OrderDto mapToOrderDto(Order order) {
	    OrderDto orderDto = new OrderDto();
	    if (order.getId() != -1) {
	        orderDto.setId(order.getId());
	    }
	    orderDto.setUser(UserMapper.mapToUserDto(order.getUser()));
	    
	    // Check if cartItems is null
	    if (order.getCartItems() != null) {
	        orderDto.setCartItems(order.getCartItems().stream()
	                .map(CartItemMapper::mapToCartItemDto)
	                .collect(Collectors.toList()));
	    }
	    
	    orderDto.setOrderDate(order.getOrderDate());
	    orderDto.setStatus(order.getStatus());
	    orderDto.setTotalPrice(order.getTotalPrice());
	    return orderDto;
	}


	public static Order mapToOrder(OrderDto orderDto) {
	    Order order = new Order();
	    if (orderDto.getId() != null) {
	        order.setId(orderDto.getId().longValue());
	    }
	    order.setUser(UserMapper.mapToUser(orderDto.getUser()));
	    // Check if cart items are not null before mapping
	    if (orderDto.getCartItems() != null) {
	        order.setCartItems(CartItemMapper.mapToCartItemList(orderDto.getCartItems()));
	    } else {
	        order.setCartItems(new ArrayList<>()); // Set an empty list if cart items are null
	    }
	    order.setOrderDate(orderDto.getOrderDate());
	    order.setStatus(orderDto.getStatus());
	    return order;
	}

    public static List<OrderDto> mapToOrderDtoList(List<Order> orders) {
        return orders.stream()
                .map(OrderMapper::mapToOrderDto)
                .collect(Collectors.toList());
    }

    private static BigDecimal calculateTotalPrice(List<CartItem> cartItems) {
        BigDecimal totalPrice = BigDecimal.ZERO;
        for (CartItem cartItem : cartItems) {
            BigDecimal productPrice = cartItem.getProduct().getBasePrice();
            BigDecimal itemTotalPrice = productPrice.multiply(BigDecimal.valueOf(cartItem.getQuantity()));
            totalPrice = totalPrice.add(itemTotalPrice);
        }
        return totalPrice;
    }
}
