package net.javaguides.springboot.mapper;

import net.javaguides.springboot.dto.OrderDto;
import net.javaguides.springboot.model.CartItem;
import net.javaguides.springboot.model.Order;

import java.math.BigDecimal;
import java.util.List;
import java.util.stream.Collectors;

public class OrderMapper {

	public static OrderDto mapToOrderDto(Order order) {
        OrderDto orderDto = new OrderDto();
        if (order.getId() != -1) {
            orderDto.setId(order.getId());
        }
        orderDto.setUser(UserMapper.mapToUserDto(order.getUser()));
        orderDto.setCartItems(order.getCartItems().stream()
                .map(CartItemMapper::mapToCartItemDto)
                .collect(Collectors.toList()));
        orderDto.setOrderDate(order.getOrderDate());
        orderDto.setStatus(order.getStatus());
        orderDto.setTotalPrice(order.getTotalPrice());
        return orderDto;
    }

	public static Order mapToOrder(OrderDto orderDto) {
	    Order order = new Order();
	    if (orderDto.getId() != null) {
	        order.setId(orderDto.getId());
	    }
	    order.setUser(UserMapper.mapToUser(orderDto.getUser()));
	    List<CartItem> cartItems = orderDto.getCartItems().stream()
	            .map(CartItemMapper::mapToCartItem)
	            .collect(Collectors.toList());
	    order.setCartItems(cartItems);
	    order.setOrderDate(orderDto.getOrderDate());
	    order.setStatus(orderDto.getStatus());
	    order.setTotalPrice(orderDto.getTotalPrice());
	    return order;
	}


    public static List<OrderDto> mapToOrderDtoList(List<Order> orders) {
        return orders.stream()
                .map(OrderMapper::mapToOrderDto)
                .collect(Collectors.toList());
    }

    private static BigDecimal calculateTotalPrice(List<CartItem> cartItems) {
        BigDecimal totalPrice = BigDecimal.ZERO;
        for (CartItem cartItem : cartItems) {
            BigDecimal productPrice = cartItem.getProduct().getBasePrice();
            BigDecimal itemTotalPrice = productPrice.multiply(BigDecimal.valueOf(cartItem.getQuantity()));
            totalPrice = totalPrice.add(itemTotalPrice);
        }
        return totalPrice;
    }
}
