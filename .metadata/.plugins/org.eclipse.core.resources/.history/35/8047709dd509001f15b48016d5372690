package net.javaguides.springboot.service;

import net.javaguides.springboot.dto.OrderDto;
import net.javaguides.springboot.exception.OrderNotFoundException;
import net.javaguides.springboot.mapper.OrderMapper;
import net.javaguides.springboot.model.Order;
import net.javaguides.springboot.model.user;
import net.javaguides.springboot.repository.OrderRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
@Transactional
public class OrderService {

    @Autowired
    private OrderRepository orderRepository;

    // Create an order
    @Transactional
    public OrderDto createOrder(OrderDto orderDto) {
        // Map OrderDto to Order entity
        Order order = OrderMapper.mapToOrder(orderDto);
        
        // Retrieve user from OrderDto
        user user = order.getUser();
        
        // Check if user and cart exist
        if (user != null && user.getCart() != null) {
            // Set cartItems from user's cart to the order
            order.setCartItems(user.getCart().getCartItems());
        } else {
            // Handle the case where user or cart is null
            // You can log an error or throw an exception, depending on your application logic
            // For simplicity, let's set an empty list if cartItems cannot be retrieved
            order.setCartItems(new ArrayList<>());
        }
        
        // Save the order entity
        order = orderRepository.save(order);
        
        // Map Order entity back to OrderDto and return
        return OrderMapper.mapToOrderDto(order);
    }


    // Get all orders by user ID
    public List<OrderDto> getOrdersByUserId(Long userId) {
        List<Order> orders = orderRepository.findByUserId(userId);
        return orders.stream()
                .map(OrderMapper::mapToOrderDto)
                .collect(Collectors.toList());
    }

    // Get all orders (for admin)
    public List<OrderDto> getAllOrders() {
        List<Order> orders = orderRepository.findAll();
        return orders.stream()
                .map(OrderMapper::mapToOrderDto)
                .collect(Collectors.toList());
    }

    // Cancel an order
    public OrderDto cancelOrder(Long orderId) {
        Optional<Order> optionalOrder = orderRepository.findById(orderId);
        if (optionalOrder.isPresent()) {
            Order order = optionalOrder.get();
            if (!order.getStatus().equals("Delivered") && !order.getStatus().equals("Cancelled")) {
                order.setStatus("Cancelled");
                order = orderRepository.save(order);
                return OrderMapper.mapToOrderDto(order);
            } else {
                throw new IllegalArgumentException("Order cannot be cancelled because its status is " + order.getStatus());
            }
        } else {
            throw new OrderNotFoundException("Order not found with ID: " + orderId);
        }
    }
    
 // User cancels an order
    public OrderDto userCancelOrder(Long userId, Long orderId) {
        Optional<Order> optionalOrder = orderRepository.findById(orderId);
        if (optionalOrder.isPresent()) {
            Order order = optionalOrder.get();
            if (order.getUser().getId() == userId) {
                if (!order.getStatus().equals("Delivered") && !order.getStatus().equals("Cancelled")) {
                    order.setStatus("Cancelled");
                    order = orderRepository.save(order);
                    return OrderMapper.mapToOrderDto(order);
                } else {
                    throw new IllegalArgumentException("Order cannot be cancelled because its status is " + order.getStatus());
                }
            } else {
                throw new IllegalArgumentException("User does not have permission to cancel this order");
            }
        } else {
            throw new OrderNotFoundException("Order not found with ID: " + orderId);
        }
    }

}
