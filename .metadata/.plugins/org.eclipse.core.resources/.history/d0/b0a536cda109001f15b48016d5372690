package net.javaguides.springboot.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import net.javaguides.springboot.dto.CartItemDto;
import net.javaguides.springboot.exception.CartItemNotFoundException;
import net.javaguides.springboot.exception.CartNotFoundException;
import net.javaguides.springboot.mapper.CartItemMapper;
import net.javaguides.springboot.model.Cart;
import net.javaguides.springboot.model.CartItem;
import net.javaguides.springboot.repository.CartItemRepository;
import net.javaguides.springboot.repository.CartRepository;

@Service
public class CartItemService {

    @Autowired
    private CartItemRepository cartItemRepository;
    private CartRepository cartRepository;

    public CartItemService(CartItemRepository cartItemRepository) {
        this.cartItemRepository = cartItemRepository;
    }

    public List<CartItemDto> getCartItemsByCartId(Long cartId) {
        List<CartItem> cartItems = cartItemRepository.findByCartId(cartId);
        return CartItemMapper.mapToCartItemDtoList(cartItems);
    }

    public CartItemDto createCartItem(CartItemDto cartItemDto) {
        // Check if there is already a cart item with the same cart and product
        Optional<CartItem> existingCartItemOptional = cartItemRepository.findByCartAndProduct(
                CartMapper.mapToCart(cartItemDto.getCart()),
                ProductMapper.mapToProduct(cartItemDto.getProduct())
        );

        if (existingCartItemOptional.isPresent()) {
            // If a cart item with the same cart and product exists, update its quantity and price
            CartItem existingCartItem = existingCartItemOptional.get();
            int newQuantity = existingCartItem.getQuantity() + cartItemDto.getQuantity();
            double basePrice = cartItemDto.getProduct().getBasePrice();
            double reduction = cartItemDto.getProduct().getReduction();
            int threshold = cartItemDto.getProduct().getThreshold();

            // Calculate the price without reduction first
            double priceWithoutReduction = basePrice * newQuantity;

            // Apply reduction if quantity is equal to or greater than the threshold
            double calculatedPrice;
            if (newQuantity >= threshold) {
                // Limit the reduction to three times the threshold
                int reducedQuantity = Math.min(newQuantity, threshold * 3);
                int wholeNumberReductionMultiplier = reducedQuantity / threshold; // Get only the whole number part
                calculatedPrice = priceWithoutReduction - (basePrice * reduction * wholeNumberReductionMultiplier);
            } else {
                calculatedPrice = priceWithoutReduction; // No reduction
            }

            // Update existing cart item with new quantity and price
            existingCartItem.setQuantity(newQuantity);
            existingCartItem.setPrice(calculatedPrice);

            // Save the updated cart item
            return CartItemMapper.mapToCartItemDto(cartItemRepository.save(existingCartItem));
        } else {
            // If no existing cart item found, create a new one
            double basePrice = cartItemDto.getProduct().getBasePrice();
            int quantity = cartItemDto.getQuantity();
            double reduction = cartItemDto.getProduct().getReduction();
            int threshold = cartItemDto.getProduct().getThreshold();

            // Calculate the price without reduction first
            double priceWithoutReduction = basePrice * quantity;

            // Apply reduction if quantity is equal to or greater than the threshold
            double calculatedPrice;
            if (quantity >= threshold) {
                // Limit the reduction to three times the threshold
                int reducedQuantity = Math.min(quantity, threshold * 3);
                int wholeNumberReductionMultiplier = reducedQuantity / threshold; // Get only the whole number part
                calculatedPrice = priceWithoutReduction - (basePrice * reduction * wholeNumberReductionMultiplier);
            } else {
                calculatedPrice = priceWithoutReduction; // No reduction
            }

            // Update the cart item's price with the calculated price
            cartItemDto.setPrice(calculatedPrice);

            // Map the CartItemDto to CartItem and save it to the repository
            CartItem cartItem = CartItemMapper.mapToCartItem(cartItemDto);
            return CartItemMapper.mapToCartItemDto(cartItemRepository.save(cartItem));
        }
    }



    public CartItemDto updateCartItem(Long cartItemId, CartItemDto cartItemDto) {
        Optional<CartItem> optionalCartItem = cartItemRepository.findById(cartItemId);
        if (optionalCartItem.isPresent()) {
            CartItem cartItem = optionalCartItem.get();
            // Update only if the provided cartItemId matches the one retrieved from the database
            if (!cartItemId.equals(cartItemDto.getId())) {
                throw new IllegalArgumentException("Provided cartItemId does not match the one in the cartItemDto");
            }
            cartItem.setQuantity(cartItemDto.getQuantity());
            cartItem.setPrice(cartItemDto.getPrice()); // Set the price
            cartItem = cartItemRepository.save(cartItem);
            return CartItemMapper.mapToCartItemDto(cartItem);
        } else {
            throw new CartItemNotFoundException("Cart item not found with ID: " + cartItemId);
        }
    }



    public void deleteCartItem(Long cartItemId) {
        Optional<CartItem> optionalCartItem = cartItemRepository.findById(cartItemId);
        if (optionalCartItem.isPresent()) {
            cartItemRepository.delete(optionalCartItem.get());
        } else {
            throw new CartItemNotFoundException("Cart item not found with ID: " + cartItemId);
        }
    }



}
